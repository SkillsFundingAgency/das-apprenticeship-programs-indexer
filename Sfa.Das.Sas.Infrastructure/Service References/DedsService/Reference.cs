//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace Sfa.Das.Sas.Indexer.Infrastructure.Service_References.DedsService {
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DataContractBase", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    [KnownType(typeof(DiscoverDataSetVersionsCriteria))]
    [KnownType(typeof(DataSetVersionDescriptor))]
    [KnownType(typeof(DiscoverQueriesCriteria))]
    [KnownType(typeof(QueryDescriptor))]
    [KnownType(typeof(FilterDescriptor))]
    [KnownType(typeof(SortDescriptor))]
    [KnownType(typeof(DiscoverFilesCriteria))]
    [KnownType(typeof(SortValue))]
    [KnownType(typeof(FileDescriptor))]
    [KnownType(typeof(QueryExecution))]
    [KnownType(typeof(FilterValue))]
    [KnownType(typeof(QueryResults))]
    [KnownType(typeof(FileData))]
    [KnownType(typeof(DataSetDescriptor))]
    public partial class DataContractBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DiscoverDataSetVersionsCriteria", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class DiscoverDataSetVersionsCriteria : DataContractBase {
        
        [OptionalField()]
        private string DataSetCollectionIdField;
        
        [OptionalField()]
        private string DataSetDataProviderIdField;
        
        [DataMember()]
        public string DataSetCollectionId {
            get {
                return this.DataSetCollectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSetCollectionIdField, value) != true)) {
                    this.DataSetCollectionIdField = value;
                    this.RaisePropertyChanged("DataSetCollectionId");
                }
            }
        }
        
        [DataMember()]
        public string DataSetDataProviderId {
            get {
                return this.DataSetDataProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSetDataProviderIdField, value) != true)) {
                    this.DataSetDataProviderIdField = value;
                    this.RaisePropertyChanged("DataSetDataProviderId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DataSetVersionDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class DataSetVersionDescriptor : DataContractBase {
        
        [OptionalField()]
        private System.Nullable<System.Guid> DataSetIdField;
        
        [OptionalField()]
        private string DatabaseNameField;
        
        [OptionalField()]
        private System.Nullable<bool> HasBeenThroughQualityAssuranceField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> IdField;
        
        [OptionalField()]
        private System.Nullable<bool> IsMandatoryField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> PublishedDateTimeField;
        
        [OptionalField()]
        private System.Nullable<PublishedStateDescriptor> PublishedStateField;
        
        [OptionalField()]
        private string ReasonForVersionField;
        
        [OptionalField()]
        private string[] RolesField;
        
        [OptionalField()]
        private System.Nullable<int> VersionField;
        
        [DataMember()]
        public System.Nullable<System.Guid> DataSetId {
            get {
                return this.DataSetIdField;
            }
            set {
                if ((this.DataSetIdField.Equals(value) != true)) {
                    this.DataSetIdField = value;
                    this.RaisePropertyChanged("DataSetId");
                }
            }
        }
        
        [DataMember()]
        public string DatabaseName {
            get {
                return this.DatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseNameField, value) != true)) {
                    this.DatabaseNameField = value;
                    this.RaisePropertyChanged("DatabaseName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<bool> HasBeenThroughQualityAssurance {
            get {
                return this.HasBeenThroughQualityAssuranceField;
            }
            set {
                if ((this.HasBeenThroughQualityAssuranceField.Equals(value) != true)) {
                    this.HasBeenThroughQualityAssuranceField = value;
                    this.RaisePropertyChanged("HasBeenThroughQualityAssurance");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<bool> IsMandatory {
            get {
                return this.IsMandatoryField;
            }
            set {
                if ((this.IsMandatoryField.Equals(value) != true)) {
                    this.IsMandatoryField = value;
                    this.RaisePropertyChanged("IsMandatory");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> PublishedDateTime {
            get {
                return this.PublishedDateTimeField;
            }
            set {
                if ((this.PublishedDateTimeField.Equals(value) != true)) {
                    this.PublishedDateTimeField = value;
                    this.RaisePropertyChanged("PublishedDateTime");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<PublishedStateDescriptor> PublishedState {
            get {
                return this.PublishedStateField;
            }
            set {
                if ((this.PublishedStateField.Equals(value) != true)) {
                    this.PublishedStateField = value;
                    this.RaisePropertyChanged("PublishedState");
                }
            }
        }
        
        [DataMember()]
        public string ReasonForVersion {
            get {
                return this.ReasonForVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonForVersionField, value) != true)) {
                    this.ReasonForVersionField = value;
                    this.RaisePropertyChanged("ReasonForVersion");
                }
            }
        }
        
        [DataMember()]
        public string[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<int> Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DiscoverQueriesCriteria", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class DiscoverQueriesCriteria : DataContractBase {
        
        [OptionalField()]
        private System.Nullable<System.Guid> DataSetVersionIdField;
        
        [DataMember()]
        public System.Nullable<System.Guid> DataSetVersionId {
            get {
                return this.DataSetVersionIdField;
            }
            set {
                if ((this.DataSetVersionIdField.Equals(value) != true)) {
                    this.DataSetVersionIdField = value;
                    this.RaisePropertyChanged("DataSetVersionId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="QueryDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class QueryDescriptor : DataContractBase {
        
        [OptionalField()]
        private string CodeField;
        
        [OptionalField()]
        private string DescriptionField;
        
        [OptionalField()]
        private FilterDescriptor[] FilterDescriptorsField;
        
        [OptionalField()]
        private System.Nullable<bool> GetTotalCountSupportedField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> IdField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private System.Nullable<bool> PagingSupportedField;
        
        [OptionalField()]
        private string[] RolesField;
        
        [OptionalField()]
        private SortDescriptor[] SortDescriptorsField;
        
        [DataMember()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [DataMember()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [DataMember()]
        public FilterDescriptor[] FilterDescriptors {
            get {
                return this.FilterDescriptorsField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterDescriptorsField, value) != true)) {
                    this.FilterDescriptorsField = value;
                    this.RaisePropertyChanged("FilterDescriptors");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<bool> GetTotalCountSupported {
            get {
                return this.GetTotalCountSupportedField;
            }
            set {
                if ((this.GetTotalCountSupportedField.Equals(value) != true)) {
                    this.GetTotalCountSupportedField = value;
                    this.RaisePropertyChanged("GetTotalCountSupported");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<bool> PagingSupported {
            get {
                return this.PagingSupportedField;
            }
            set {
                if ((this.PagingSupportedField.Equals(value) != true)) {
                    this.PagingSupportedField = value;
                    this.RaisePropertyChanged("PagingSupported");
                }
            }
        }
        
        [DataMember()]
        public string[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [DataMember()]
        public SortDescriptor[] SortDescriptors {
            get {
                return this.SortDescriptorsField;
            }
            set {
                if ((object.ReferenceEquals(this.SortDescriptorsField, value) != true)) {
                    this.SortDescriptorsField = value;
                    this.RaisePropertyChanged("SortDescriptors");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="FilterDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class FilterDescriptor : DataContractBase {
        
        [OptionalField()]
        private string FieldDescriptionField;
        
        [OptionalField()]
        private string FieldNameField;
        
        [OptionalField()]
        private string FieldOperatorField;
        
        [OptionalField()]
        private string FieldTypeField;
        
        [OptionalField()]
        private System.Nullable<bool> IsRequiredField;
        
        [OptionalField()]
        private string[] PickListValuesField;
        
        [DataMember()]
        public string FieldDescription {
            get {
                return this.FieldDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldDescriptionField, value) != true)) {
                    this.FieldDescriptionField = value;
                    this.RaisePropertyChanged("FieldDescription");
                }
            }
        }
        
        [DataMember()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [DataMember()]
        public string FieldOperator {
            get {
                return this.FieldOperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldOperatorField, value) != true)) {
                    this.FieldOperatorField = value;
                    this.RaisePropertyChanged("FieldOperator");
                }
            }
        }
        
        [DataMember()]
        public string FieldType {
            get {
                return this.FieldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldTypeField, value) != true)) {
                    this.FieldTypeField = value;
                    this.RaisePropertyChanged("FieldType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<bool> IsRequired {
            get {
                return this.IsRequiredField;
            }
            set {
                if ((this.IsRequiredField.Equals(value) != true)) {
                    this.IsRequiredField = value;
                    this.RaisePropertyChanged("IsRequired");
                }
            }
        }
        
        [DataMember()]
        public string[] PickListValues {
            get {
                return this.PickListValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.PickListValuesField, value) != true)) {
                    this.PickListValuesField = value;
                    this.RaisePropertyChanged("PickListValues");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="SortDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class SortDescriptor : DataContractBase {
        
        [OptionalField()]
        private string FieldDescriptionField;
        
        [OptionalField()]
        private string FieldNameField;
        
        [OptionalField()]
        private System.Nullable<bool> IsRequiredField;
        
        [DataMember()]
        public string FieldDescription {
            get {
                return this.FieldDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldDescriptionField, value) != true)) {
                    this.FieldDescriptionField = value;
                    this.RaisePropertyChanged("FieldDescription");
                }
            }
        }
        
        [DataMember()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<bool> IsRequired {
            get {
                return this.IsRequiredField;
            }
            set {
                if ((this.IsRequiredField.Equals(value) != true)) {
                    this.IsRequiredField = value;
                    this.RaisePropertyChanged("IsRequired");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DiscoverFilesCriteria", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class DiscoverFilesCriteria : DataContractBase {
        
        [OptionalField()]
        private string CollectionIdField;
        
        [OptionalField()]
        private string DataProviderIdField;
        
        [OptionalField()]
        private string FileTypeField;
        
        [OptionalField()]
        private System.Nullable<int> PageNumberField;
        
        [OptionalField()]
        private System.Nullable<int> PageSizeField;
        
        [OptionalField()]
        private string[] RolesField;
        
        [OptionalField()]
        private SortValue[] SortValuesField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> SubmissionIdField;
        
        [DataMember()]
        public string CollectionId {
            get {
                return this.CollectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionIdField, value) != true)) {
                    this.CollectionIdField = value;
                    this.RaisePropertyChanged("CollectionId");
                }
            }
        }
        
        [DataMember()]
        public string DataProviderId {
            get {
                return this.DataProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DataProviderIdField, value) != true)) {
                    this.DataProviderIdField = value;
                    this.RaisePropertyChanged("DataProviderId");
                }
            }
        }
        
        [DataMember()]
        public string FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTypeField, value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<int> PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<int> PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [DataMember()]
        public string[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [DataMember()]
        public SortValue[] SortValues {
            get {
                return this.SortValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.SortValuesField, value) != true)) {
                    this.SortValuesField = value;
                    this.RaisePropertyChanged("SortValues");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> SubmissionId {
            get {
                return this.SubmissionIdField;
            }
            set {
                if ((this.SubmissionIdField.Equals(value) != true)) {
                    this.SubmissionIdField = value;
                    this.RaisePropertyChanged("SubmissionId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="SortValue", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class SortValue : DataContractBase {
        
        [OptionalField()]
        private string FieldNameField;
        
        [OptionalField()]
        private System.Nullable<SortOrder> SortOrderField;
        
        [DataMember()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<SortOrder> SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="FileDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class FileDescriptor : DataContractBase {
        
        [OptionalField()]
        private string CollectionIdField;
        
        [OptionalField()]
        private string DataProviderIdField;
        
        [OptionalField()]
        private string DescriptionField;
        
        [OptionalField()]
        private string FileNameField;
        
        [OptionalField()]
        private System.Nullable<long> FileSizeBytesField;
        
        [OptionalField()]
        private string FileTypeField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> IdField;
        
        [OptionalField()]
        private string MimeTypeField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> PublishedDateTimeField;
        
        [OptionalField()]
        private System.Nullable<System.TimeSpan> RetentionDurationField;
        
        [OptionalField()]
        private string[] RolesField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> SubmissionIdField;
        
        [OptionalField()]
        private string TitleField;
        
        [DataMember()]
        public string CollectionId {
            get {
                return this.CollectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionIdField, value) != true)) {
                    this.CollectionIdField = value;
                    this.RaisePropertyChanged("CollectionId");
                }
            }
        }
        
        [DataMember()]
        public string DataProviderId {
            get {
                return this.DataProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DataProviderIdField, value) != true)) {
                    this.DataProviderIdField = value;
                    this.RaisePropertyChanged("DataProviderId");
                }
            }
        }
        
        [DataMember()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [DataMember()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<long> FileSizeBytes {
            get {
                return this.FileSizeBytesField;
            }
            set {
                if ((this.FileSizeBytesField.Equals(value) != true)) {
                    this.FileSizeBytesField = value;
                    this.RaisePropertyChanged("FileSizeBytes");
                }
            }
        }
        
        [DataMember()]
        public string FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTypeField, value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> PublishedDateTime {
            get {
                return this.PublishedDateTimeField;
            }
            set {
                if ((this.PublishedDateTimeField.Equals(value) != true)) {
                    this.PublishedDateTimeField = value;
                    this.RaisePropertyChanged("PublishedDateTime");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.TimeSpan> RetentionDuration {
            get {
                return this.RetentionDurationField;
            }
            set {
                if ((this.RetentionDurationField.Equals(value) != true)) {
                    this.RetentionDurationField = value;
                    this.RaisePropertyChanged("RetentionDuration");
                }
            }
        }
        
        [DataMember()]
        public string[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> SubmissionId {
            get {
                return this.SubmissionIdField;
            }
            set {
                if ((this.SubmissionIdField.Equals(value) != true)) {
                    this.SubmissionIdField = value;
                    this.RaisePropertyChanged("SubmissionId");
                }
            }
        }
        
        [DataMember()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="QueryExecution", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class QueryExecution : DataContractBase {
        
        [OptionalField()]
        private FilterValue[] FilterValuesField;
        
        [OptionalField()]
        private System.Nullable<int> PageNumberField;
        
        [OptionalField()]
        private System.Nullable<int> PageSizeField;
        
        [OptionalField()]
        private SortValue[] SortValuesField;
        
        [DataMember()]
        public FilterValue[] FilterValues {
            get {
                return this.FilterValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterValuesField, value) != true)) {
                    this.FilterValuesField = value;
                    this.RaisePropertyChanged("FilterValues");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<int> PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<int> PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [DataMember()]
        public SortValue[] SortValues {
            get {
                return this.SortValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.SortValuesField, value) != true)) {
                    this.SortValuesField = value;
                    this.RaisePropertyChanged("SortValues");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="FilterValue", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class FilterValue : DataContractBase {
        
        [OptionalField()]
        private string FieldNameField;
        
        [OptionalField()]
        private string FieldValueField;
        
        [DataMember()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [DataMember()]
        public string FieldValue {
            get {
                return this.FieldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldValueField, value) != true)) {
                    this.FieldValueField = value;
                    this.RaisePropertyChanged("FieldValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="QueryResults", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class QueryResults : DataContractBase {
        
        [OptionalField()]
        private string[] FieldNamesField;
        
        [OptionalField()]
        private string[][] ResultsField;
        
        [DataMember()]
        public string[] FieldNames {
            get {
                return this.FieldNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNamesField, value) != true)) {
                    this.FieldNamesField = value;
                    this.RaisePropertyChanged("FieldNames");
                }
            }
        }
        
        [DataMember()]
        public string[][] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="FileData", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class FileData : DataContractBase {
        
        [OptionalField()]
        private string CollectionIdField;
        
        [OptionalField()]
        private string DataProviderIdField;
        
        [OptionalField()]
        private string DescriptionField;
        
        [OptionalField()]
        private byte[] FileContentField;
        
        [OptionalField()]
        private string FileNameField;
        
        [OptionalField()]
        private System.Nullable<long> FileSizeBytesField;
        
        [OptionalField()]
        private string FileTypeField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> IdField;
        
        [OptionalField()]
        private string MimeTypeField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> PublishedDateTimeField;
        
        [OptionalField()]
        private string[] RolesField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> SubmissionIdField;
        
        [OptionalField()]
        private string TitleField;
        
        [DataMember()]
        public string CollectionId {
            get {
                return this.CollectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionIdField, value) != true)) {
                    this.CollectionIdField = value;
                    this.RaisePropertyChanged("CollectionId");
                }
            }
        }
        
        [DataMember()]
        public string DataProviderId {
            get {
                return this.DataProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DataProviderIdField, value) != true)) {
                    this.DataProviderIdField = value;
                    this.RaisePropertyChanged("DataProviderId");
                }
            }
        }
        
        [DataMember()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [DataMember()]
        public byte[] FileContent {
            get {
                return this.FileContentField;
            }
            set {
                if ((object.ReferenceEquals(this.FileContentField, value) != true)) {
                    this.FileContentField = value;
                    this.RaisePropertyChanged("FileContent");
                }
            }
        }
        
        [DataMember()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<long> FileSizeBytes {
            get {
                return this.FileSizeBytesField;
            }
            set {
                if ((this.FileSizeBytesField.Equals(value) != true)) {
                    this.FileSizeBytesField = value;
                    this.RaisePropertyChanged("FileSizeBytes");
                }
            }
        }
        
        [DataMember()]
        public string FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTypeField, value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> PublishedDateTime {
            get {
                return this.PublishedDateTimeField;
            }
            set {
                if ((this.PublishedDateTimeField.Equals(value) != true)) {
                    this.PublishedDateTimeField = value;
                    this.RaisePropertyChanged("PublishedDateTime");
                }
            }
        }
        
        [DataMember()]
        public string[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> SubmissionId {
            get {
                return this.SubmissionIdField;
            }
            set {
                if ((this.SubmissionIdField.Equals(value) != true)) {
                    this.SubmissionIdField = value;
                    this.RaisePropertyChanged("SubmissionId");
                }
            }
        }
        
        [DataMember()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DataSetDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    [Serializable()]
    public partial class DataSetDescriptor : DataContractBase {
        
        [OptionalField()]
        private string CodeField;
        
        [OptionalField()]
        private string CollectionIdField;
        
        [OptionalField()]
        private string DataProviderIdField;
        
        [OptionalField()]
        private string DatabaseNameField;
        
        [OptionalField()]
        private string DescriptionField;
        
        [OptionalField()]
        private System.Nullable<System.Guid> IdField;
        
        [OptionalField()]
        private string NameField;
        
        [OptionalField()]
        private System.Nullable<System.TimeSpan> RetentionDurationField;
        
        [DataMember()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [DataMember()]
        public string CollectionId {
            get {
                return this.CollectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionIdField, value) != true)) {
                    this.CollectionIdField = value;
                    this.RaisePropertyChanged("CollectionId");
                }
            }
        }
        
        [DataMember()]
        public string DataProviderId {
            get {
                return this.DataProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DataProviderIdField, value) != true)) {
                    this.DataProviderIdField = value;
                    this.RaisePropertyChanged("DataProviderId");
                }
            }
        }
        
        [DataMember()]
        public string DatabaseName {
            get {
                return this.DatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseNameField, value) != true)) {
                    this.DatabaseNameField = value;
                    this.RaisePropertyChanged("DatabaseName");
                }
            }
        }
        
        [DataMember()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.Guid> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.TimeSpan> RetentionDuration {
            get {
                return this.RetentionDurationField;
            }
            set {
                if ((this.RetentionDurationField.Equals(value) != true)) {
                    this.RetentionDurationField = value;
                    this.RaisePropertyChanged("RetentionDuration");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PublishedStateDescriptor", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    public enum PublishedStateDescriptor : int {
        
        [EnumMember()]
        Created = 0,
        
        [EnumMember()]
        PendingQualityAssurance = 1,
        
        [EnumMember()]
        Published = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="SortOrder", Namespace="http://ws.imservices.org.uk/dcft/deds/1.0/datacontracts")]
    public enum SortOrder : int {
        
        [EnumMember()]
        Ascending = 0,
        
        [EnumMember()]
        Descending = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ws.imservices.org.uk/dcft/deds/1.0", ConfigurationName="DedsService.IDedsSearchService")]
    public interface IDedsSearchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSet", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSetResponse")]
        DataSetDescriptor GetDataSet(System.Guid dataSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSet", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSetResponse")]
        System.Threading.Tasks.Task<DataSetDescriptor> GetDataSetAsync(System.Guid dataSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSetByCode", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSetByCodeResp" +
            "onse")]
        DataSetDescriptor GetDataSetByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSetByCode", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetDataSetByCodeResp" +
            "onse")]
        System.Threading.Tasks.Task<DataSetDescriptor> GetDataSetByCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverDataSetVersi" +
            "ons", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverDataSetVersi" +
            "onsResponse")]
        DataSetVersionDescriptor[] DiscoverDataSetVersions(DiscoverDataSetVersionsCriteria discoverDataSetVersionsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverDataSetVersi" +
            "ons", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverDataSetVersi" +
            "onsResponse")]
        System.Threading.Tasks.Task<DataSetVersionDescriptor[]> DiscoverDataSetVersionsAsync(DiscoverDataSetVersionsCriteria discoverDataSetVersionsCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverQueries", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverQueriesRespo" +
            "nse")]
        QueryDescriptor[] DiscoverQueries(DiscoverQueriesCriteria discoverQueriesCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverQueries", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverQueriesRespo" +
            "nse")]
        System.Threading.Tasks.Task<QueryDescriptor[]> DiscoverQueriesAsync(DiscoverQueriesCriteria discoverQueriesCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFiles", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFilesRespons" +
            "e")]
        FileDescriptor[] DiscoverFiles(DiscoverFilesCriteria discoverFilesCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFiles", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFilesRespons" +
            "e")]
        System.Threading.Tasks.Task<FileDescriptor[]> DiscoverFilesAsync(DiscoverFilesCriteria discoverFilesCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFilesCount", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFilesCountRe" +
            "sponse")]
        long DiscoverFilesCount(DiscoverFilesCriteria discoverFilesCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFilesCount", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/DiscoverFilesCountRe" +
            "sponse")]
        System.Threading.Tasks.Task<long> DiscoverFilesCountAsync(DiscoverFilesCriteria discoverFilesCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQuery", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQueryResponse" +
            "")]
        QueryResults[] ExecuteQuery(System.Guid queryId, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQuery", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQueryResponse" +
            "")]
        System.Threading.Tasks.Task<QueryResults[]> ExecuteQueryAsync(System.Guid queryId, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCount", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCountRespons" +
            "e")]
        long GetTotalCount(System.Guid queryId, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCount", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCountRespons" +
            "e")]
        System.Threading.Tasks.Task<long> GetTotalCountAsync(System.Guid queryId, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQueryByCode", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQueryByCodeRe" +
            "sponse")]
        QueryResults[] ExecuteQueryByCode(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQueryByCode", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/ExecuteQueryByCodeRe" +
            "sponse")]
        System.Threading.Tasks.Task<QueryResults[]> ExecuteQueryByCodeAsync(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCountByCode", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCountByCodeR" +
            "esponse")]
        long GetTotalCountByCode(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCountByCode", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetTotalCountByCodeR" +
            "esponse")]
        System.Threading.Tasks.Task<long> GetTotalCountByCodeAsync(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetFile", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetFileResponse")]
        FileData GetFile(System.Guid fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetFile", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetFileResponse")]
        System.Threading.Tasks.Task<FileData> GetFileAsync(System.Guid fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetLatestPublishedDa" +
            "taSetVersion", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetLatestPublishedDa" +
            "taSetVersionResponse")]
        DataSetVersionDescriptor GetLatestPublishedDataSetVersion(string dataSetCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetLatestPublishedDa" +
            "taSetVersion", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetLatestPublishedDa" +
            "taSetVersionResponse")]
        System.Threading.Tasks.Task<DataSetVersionDescriptor> GetLatestPublishedDataSetVersionAsync(string dataSetCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetPublishedDataSetV" +
            "ersions", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetPublishedDataSetV" +
            "ersionsResponse")]
        DataSetVersionDescriptor[] GetPublishedDataSetVersions(string dataSetCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetPublishedDataSetV" +
            "ersions", ReplyAction="http://ws.imservices.org.uk/dcft/deds/1.0/IDedsSearchService/GetPublishedDataSetV" +
            "ersionsResponse")]
        System.Threading.Tasks.Task<DataSetVersionDescriptor[]> GetPublishedDataSetVersionsAsync(string dataSetCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDedsSearchServiceChannel : IDedsSearchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DedsSearchServiceClient : System.ServiceModel.ClientBase<IDedsSearchService>, IDedsSearchService {
        
        public DedsSearchServiceClient() {
        }
        
        public DedsSearchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DedsSearchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DedsSearchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DedsSearchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataSetDescriptor GetDataSet(System.Guid dataSetId) {
            return base.Channel.GetDataSet(dataSetId);
        }
        
        public System.Threading.Tasks.Task<DataSetDescriptor> GetDataSetAsync(System.Guid dataSetId) {
            return base.Channel.GetDataSetAsync(dataSetId);
        }
        
        public DataSetDescriptor GetDataSetByCode(string code) {
            return base.Channel.GetDataSetByCode(code);
        }
        
        public System.Threading.Tasks.Task<DataSetDescriptor> GetDataSetByCodeAsync(string code) {
            return base.Channel.GetDataSetByCodeAsync(code);
        }
        
        public DataSetVersionDescriptor[] DiscoverDataSetVersions(DiscoverDataSetVersionsCriteria discoverDataSetVersionsCriteria) {
            return base.Channel.DiscoverDataSetVersions(discoverDataSetVersionsCriteria);
        }
        
        public System.Threading.Tasks.Task<DataSetVersionDescriptor[]> DiscoverDataSetVersionsAsync(DiscoverDataSetVersionsCriteria discoverDataSetVersionsCriteria) {
            return base.Channel.DiscoverDataSetVersionsAsync(discoverDataSetVersionsCriteria);
        }
        
        public QueryDescriptor[] DiscoverQueries(DiscoverQueriesCriteria discoverQueriesCriteria) {
            return base.Channel.DiscoverQueries(discoverQueriesCriteria);
        }
        
        public System.Threading.Tasks.Task<QueryDescriptor[]> DiscoverQueriesAsync(DiscoverQueriesCriteria discoverQueriesCriteria) {
            return base.Channel.DiscoverQueriesAsync(discoverQueriesCriteria);
        }
        
        public FileDescriptor[] DiscoverFiles(DiscoverFilesCriteria discoverFilesCriteria) {
            return base.Channel.DiscoverFiles(discoverFilesCriteria);
        }
        
        public System.Threading.Tasks.Task<FileDescriptor[]> DiscoverFilesAsync(DiscoverFilesCriteria discoverFilesCriteria) {
            return base.Channel.DiscoverFilesAsync(discoverFilesCriteria);
        }
        
        public long DiscoverFilesCount(DiscoverFilesCriteria discoverFilesCriteria) {
            return base.Channel.DiscoverFilesCount(discoverFilesCriteria);
        }
        
        public System.Threading.Tasks.Task<long> DiscoverFilesCountAsync(DiscoverFilesCriteria discoverFilesCriteria) {
            return base.Channel.DiscoverFilesCountAsync(discoverFilesCriteria);
        }
        
        public QueryResults[] ExecuteQuery(System.Guid queryId, QueryExecution queryExecution) {
            return base.Channel.ExecuteQuery(queryId, queryExecution);
        }
        
        public System.Threading.Tasks.Task<QueryResults[]> ExecuteQueryAsync(System.Guid queryId, QueryExecution queryExecution) {
            return base.Channel.ExecuteQueryAsync(queryId, queryExecution);
        }
        
        public long GetTotalCount(System.Guid queryId, QueryExecution queryExecution) {
            return base.Channel.GetTotalCount(queryId, queryExecution);
        }
        
        public System.Threading.Tasks.Task<long> GetTotalCountAsync(System.Guid queryId, QueryExecution queryExecution) {
            return base.Channel.GetTotalCountAsync(queryId, queryExecution);
        }
        
        public QueryResults[] ExecuteQueryByCode(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution) {
            return base.Channel.ExecuteQueryByCode(dataSetVersionId, queryCode, queryExecution);
        }
        
        public System.Threading.Tasks.Task<QueryResults[]> ExecuteQueryByCodeAsync(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution) {
            return base.Channel.ExecuteQueryByCodeAsync(dataSetVersionId, queryCode, queryExecution);
        }
        
        public long GetTotalCountByCode(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution) {
            return base.Channel.GetTotalCountByCode(dataSetVersionId, queryCode, queryExecution);
        }
        
        public System.Threading.Tasks.Task<long> GetTotalCountByCodeAsync(System.Guid dataSetVersionId, string queryCode, QueryExecution queryExecution) {
            return base.Channel.GetTotalCountByCodeAsync(dataSetVersionId, queryCode, queryExecution);
        }
        
        public FileData GetFile(System.Guid fileId) {
            return base.Channel.GetFile(fileId);
        }
        
        public System.Threading.Tasks.Task<FileData> GetFileAsync(System.Guid fileId) {
            return base.Channel.GetFileAsync(fileId);
        }
        
        public DataSetVersionDescriptor GetLatestPublishedDataSetVersion(string dataSetCode) {
            return base.Channel.GetLatestPublishedDataSetVersion(dataSetCode);
        }
        
        public System.Threading.Tasks.Task<DataSetVersionDescriptor> GetLatestPublishedDataSetVersionAsync(string dataSetCode) {
            return base.Channel.GetLatestPublishedDataSetVersionAsync(dataSetCode);
        }
        
        public DataSetVersionDescriptor[] GetPublishedDataSetVersions(string dataSetCode) {
            return base.Channel.GetPublishedDataSetVersions(dataSetCode);
        }
        
        public System.Threading.Tasks.Task<DataSetVersionDescriptor[]> GetPublishedDataSetVersionsAsync(string dataSetCode) {
            return base.Channel.GetPublishedDataSetVersionsAsync(dataSetCode);
        }
    }
}
